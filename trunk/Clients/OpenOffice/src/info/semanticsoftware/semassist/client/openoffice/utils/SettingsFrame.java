/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SettingsFrame.java
 *
 * Created on Oct 10, 2009, 11:30:34 AM
 */
package info.semanticsoftware.semassist.client.openoffice.utils;

import info.semanticsoftware.semassist.csal.ClientUtils;

import info.semanticsoftware.semassist.csal.XMLElementModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.swing.*;

/**
 *
 * @author nick
 */
public class SettingsFrame extends JFrame
{
    private static boolean mDefaultServerSelect = true;

    /** Creates new form SettingsFrame */
    public SettingsFrame()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Global Settings");
        setAlwaysOnTop(true);

        toggleServerMode(true);

        jRadioButtonDefault.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent evt) {
                toggleServerMode(true);
            }
        });

        jRadioButtonCustom.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent evt) {
                toggleServerMode(false);
            }
        });

        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent evt) {
                okButtonActionPerformed();
            }
        });

        cancelButton.addActionListener( new ActionListener()
            {

                public void actionPerformed( final ActionEvent e )
                {
                    dispose();
                    setVisible(false);
                }

            } );


            // Populate the available server combo-box from the configuration file.
            final ArrayList<XMLElementModel> result =
               ClientUtils.getClientPreference(ClientUtils.XML_CLIENT_GLOBAL, "server");
            for (final XMLElementModel node : result) {
               final String availableConnection = 
 	    		      node.getAttribute().get(ClientUtils.XML_HOST_KEY) + ":" +
 	    		      node.getAttribute().get(ClientUtils.XML_PORT_KEY);
 	    		   serversCombo.addItem(availableConnection);
            }
            if (serversCombo.getItemCount() > 0) {
               serversCombo.setSelectedItem(0);
            }

            // Attach key listeners.
            jCustomHostField.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(final java.awt.event.KeyEvent evt) {
                }
            });

            jCustomPortField.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(final java.awt.event.KeyEvent evt) {
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jSeparator2, GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))

                        // Position the default available servers elements.
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonDefault)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(serversCombo))))

                        // Position the custom hostname & port number elements.
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonCustom)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jCustomHostField)
                                    .addComponent(jCustomPortField))))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jCheckBox0))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jCheckBox1))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jCheckBox2))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jCheckBox3))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            // Position the side-note font-size label & text elements.
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(jSideNoteFontSizeLabel))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jSideNoteFontSizeField)))
                            )
                        )
                        .addGroup(layout.createSequentialGroup()
                            .addGap(197, 197, 197)
                            .addComponent(jLabel6))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(197, 197, 197)
                            .addComponent(jLabel7))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jCheckBox4))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(207, 207, 207)
                            .addComponent(jLabel1))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap(338, Short.MAX_VALUE)
                            .addComponent(cancelButton)
                            .addGap(18, 18, 18)
                            .addComponent(okButton)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(jLabel6)
                    .addGap(18, 18, 18)
                    .addComponent(jCheckBox0)
                    .addGap(18, 18, 18)
                    .addComponent(jCheckBox1)
                    .addGap(18, 18, 18)
                    .addComponent(jCheckBox2)
                    .addGap(18, 18, 18)
                    .addComponent(jCheckBox3)
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jSideNoteFontSizeLabel)
                        .addComponent(jSideNoteFontSizeField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGap(27, 27, 27)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(12, 12, 12)
                    .addComponent(jLabel7)
                    .addGap(12, 12, 12)
                    .addComponent(jCheckBox4)
                    .addGap(27, 27, 27)
                    .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                    .addGap(19, 19, 19)
                    .addComponent(jLabel1)
                    .addGap(12, 12, 12)
                    .addComponent(jRadioButtonDefault)
                    .addGap(12, 12, 12)

                    // Position the available servers & combo box elements.
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(serversCombo, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGap(19, 19, 19)
                    .addComponent(jRadioButtonCustom)
                    .addGap(12, 12, 12)

                    // Position the hostname label & text field elements.
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jCustomHostField, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGap(12, 12, 12)

                    // Position the port number label & text field elements.
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jCustomPortField, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGap(59, 59, 59)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(okButton)
                        .addComponent(cancelButton))
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed() {
        // for checkbox
        updateCheckBoxStatus();
        updateRadioButtonsStatus();
        updateServerInfo();
        updateAnnotationInfo();

        dispose();
        setVisible( false );
    }

    private void updateCheckBoxStatus()
    {
        boolean status;

        // Interactive annotation result handling option.
        status = jCheckBox0.isSelected();
        System.out.println( "------ Interactive Annotation Handling: " + (status ? "Enabled" : "Disabled") );
        ClientPreferences.setInteractiveResultHandling( status );

        // Annotation highlighting in text option.
        status = jCheckBox1.isSelected();
        System.out.println( "------ Text Highlight: " + (status ? "Enabled" : "Disabled") );
        ClientPreferences.setTextHighlightMode( status );

        // Empty feature filtering option.
        status = jCheckBox2.isSelected();
        System.out.println( "------ Filter Empty Features: " + (status ? "Enabled" : "Disabled") );
        ClientPreferences.setEmptyFeatureFilter( status );

        // Show annotation content option.
        status = jCheckBox3.isSelected();
        System.out.println( "------ Show Annotation Content: " + (status ? "Enabled" : "Disabled") );
        ClientPreferences.setShowAnnotationContent( status );

        // Handle HTML results with external borwser option.
        status = jCheckBox4.isSelected();
        System.out.println( "------ Enable Browser Result Handling: " + (status ? "Enabled" : "Disabled") );
        ClientPreferences.setBrowserResultHandling( status );
    }

    private void updateRadioButtonsStatus()
    {
        if( jRadioButtonDefault.isSelected() )
        {
            mDefaultServerSelect = true;
        }
        else
        {
            mDefaultServerSelect = false;
        }
    }

    private void updateServerInfo()
    {
        final Map<String, String> map = new HashMap<String, String>();
        if( jRadioButtonDefault.isSelected() )
        {
            // Parse the server:port combo-box selection into parts.
            final String address = serversCombo.getSelectedItem().toString();
            final String[] token = address.split(":");
            map.put(ClientUtils.XML_HOST_KEY, token[0]);
            map.put(ClientUtils.XML_PORT_KEY, token[1]);
        }
        else
        {
            // Use the server & host textfilds. Note that either
            // field is assumed to not have the ":" delimiter else
            // combo-box parsing above will fail.
            map.put(ClientUtils.XML_HOST_KEY, jCustomHostField.getText());
            map.put(ClientUtils.XML_PORT_KEY, jCustomPortField.getText());
            ClientUtils.addNewServer(map);
        }
        ClientUtils.setClientPreference(ClientPreferences.CLIENT_NAME, "server", map);
    }

    private void updateAnnotationInfo()
    {
      // Sanity check font-size field & keep previous value on error.
      final String fontSizeStr = jSideNoteFontSizeField.getText();
      if (fontSizeStr.isEmpty()) {
         System.out.println("Ignoring missing font-size");
      } else {
         try {
            final float fontSizeNum = new Float(fontSizeStr).floatValue();
            if (fontSizeNum > 0) {
               ClientPreferences.setSideNoteFontSize(fontSizeNum);
            } else {
               System.out.println("Ignoring non-positive font-size");
            }
         } catch (NumberFormatException e) {
            System.out.println("Ignoring non-numeric font-size");
         }
      }
    }

   /**
    * Convenience method to handle the default status of dialog elements.
    * @param status True to use default server prererences.
    */
   private void toggleServerMode(final boolean status) {
      serversCombo.setEnabled(status);

      jCustomHostField.setEnabled(!status);
      jCustomPortField.setEnabled(!status);

      jCustomHostField.setEditable(!status);
      jCustomPortField.setEditable(!status);

      jRadioButtonDefault.setSelected(status);
      jRadioButtonCustom.setSelected(!status);
   }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final JButton cancelButton = new JButton("Cancel");
    private static final JCheckBox jCheckBox0 =
      new JCheckBox("Allow Interactive Handling", ClientPreferences.isInteractiveResultHandling());
    private static final JCheckBox jCheckBox1 =
      new JCheckBox("Annotation Highligting", ClientPreferences.isTextHighlightMode());
    private static final JCheckBox jCheckBox2 =
      new JCheckBox("Filter Empty Features", ClientPreferences.isEmptyFeatureFilter());
    private static final JCheckBox jCheckBox3 =
      new JCheckBox("Show Annotation Content", ClientPreferences.isShowAnnotationContent());
    private static final JCheckBox jCheckBox4 =
      new JCheckBox("Open HTML results in external Browser", ClientPreferences.isBrowserResultHandling());
    private static final JTextField jSideNoteFontSizeField =
      new JTextField(Float.toString(ClientPreferences.getSideNoteFontSize()));
    private final JComboBox serversCombo = new JComboBox();
    private static final JTextField jCustomHostField = new JTextField();
    private static final JTextField jCustomPortField = new JTextField();
    private static final JLabel jLabel1 = new JLabel("Server Settings");
    private static final JLabel jLabel2 = new JLabel("Available Servers:");
    private static final JLabel jLabel4 = new JLabel("Host:");
    private static final JLabel jLabel5 = new JLabel("Port:");
    private static final JLabel jLabel6 = new JLabel("Annotation Settings");
    private static final JLabel jLabel7 = new JLabel("Client Settings");
    private static final JLabel jSideNoteFontSizeLabel = new JLabel("Font size:");
    private final JRadioButton jRadioButtonDefault = new JRadioButton("Pre-defined Servers");
    private final JRadioButton jRadioButtonCustom = new JRadioButton("Add A New Server");
    private static final JSeparator jSeparator1 = new JSeparator();
    private static final JSeparator jSeparator2 = new JSeparator();
    private final JButton okButton = new JButton("Ok");
    // End of variables declaration//GEN-END:variables

   /* For backwards compatibility, increment this serialization value ONLY when the
    * public interface of this class is changed, otherwise keep it fixed!
    */
   private static final long serialVersionUID = 1L;
}
