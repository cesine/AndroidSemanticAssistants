<?xml version="1.0" encoding="UTF-8"?>
<!--
   Semantic Assistants - http://www.semanticsoftware.info/semantic-assistants

   This file is part of the Semantic Assistants architecture.
   Copyright (C) 2012, 2013 Semantic Software Lab, http://www.semanticsoftware.info
   Rene Witte
   Bahar Sateli

   The Semantic Assistants architecture is free software: you can
   redistribute and/or modify it under the terms of the GNU Affero General
   Public License as published by the Free Software Foundation, either
   version 3 of the License, or (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="semassist-server-rest" default="pack" basedir="." 
   xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant">
   
  <property name="semassist.home"           value="../" />
  <!-- Importing SemassistProperties.xml file to use machine specific settings -->
  <import file ="${semassist.home}/SemassistProperties.xml"/>

  
  <!-- Ivy task definition -->
  <taskdef resource="org/apache/ivy/ant/antlib.xml" 
     uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar.dir}/ivy.jar"/>
     	 
  <target name="init" description="Initialize build properties">
	  
	  <!-- Ivy properties - do not edit -->
      <property name="ivy.install.version" value="2.0.0-beta2" />
      <property name="ivy.home" value="ivy" />
      <property name="ivy.jar.dir" value="${ivy.home}/lib" />
      <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
  
      <!-- build properties - do not edit -->
      <property name="project.name"      value="SemAssistRestlet"/>
      <property name="war.name"      value="${project.name}.war"/>
      <property name="dist.dir"       value="dist"/>
      <property name="src.dir"       value="src"/>
      <property name="web.dir"       value="WebContent/WEB-INF"/>
      <property name="lib.dir"       value="${web.dir}/lib"/>
      <property name="csal.jar"       value="../CSAL/dist/CSAL.jar"/>
      <path id="compile.classpath">
		<fileset dir="${lib.dir}" >
	 	 <include name="*.jar" />
		</fileset>
      </path>
      
      <!-- tomcat properties - replace with correct values -->
      <property name="tomcat.manager.url"       value="http://localhost:8080/manager"/>
      <property name="tomcat.manager.username"       value="test"/>
      <property name="tomcat.manager.password"       value="test"/>
            
  </target>

  <!-- If ivy.jar already exists, the build will skip this step -->
  <target name="download-ivy" description="Download ivy.jar from Maven central repository to resolve dependencies.">
    <mkdir dir="${ivy.jar.dir}"/>
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
      dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="resolve" depends="init, download-ivy" description="Download JAR files via ivy">
 	<path id="ivy.lib.path">
    	<fileset dir="ivy/lib" includes="*.jar"/>
  	</path>
	<taskdef resource="org/apache/ivy/ant/antlib.xml"
         uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/> 
 	<ivy:settings file="${basedir}/ivysettings.xml" />
	<ivy:retrieve pattern="${lib.dir}/[artifact].[ext]"/>
	<copy file="${csal.jar}" todir="${lib.dir}"/>
  </target>
  
  <target name="compile" depends="resolve" description="Compile the source" >
      <javac srcdir="${src.dir}" debug="true" debuglevel="lines,vars,source" destdir="${web.dir}/classes">
      	<!--compilerarg value="${compile.args}"/-->
          <classpath refid="compile.classpath" />
      </javac>
  </target>
  
   <target name="pack" depends="compile" description="Package all files in a WAR">
    	<mkdir dir="${dist.dir}"/>
		<war destfile="${dist.dir}/${war.name}" webxml="${web.dir}/web.xml">
		  <fileset dir="." >
			<include name="*.htm" />
		  </fileset>
		  <lib dir="${lib.dir}"/>
		  <classes dir="${web.dir}/classes"/>
		</war>
   </target>
   
   <target name="clean" depends="init" description="Delete generated class files and ivy folder">
	<delete dir="${ivy.home}"/>
   	<delete includeEmptyDirs="true">
	  <fileset dir="${web.dir}/classes"/>
	</delete>
	 	<delete includeEmptyDirs="true">
	  <fileset dir="${lib.dir}"/>
	</delete>
   </target>
   
   <target name="clean-all" depends="init" description="Delete all generated files including the WAR file">
    	<antcall target="clean"/>
    	<delete dir="${dist.dir}"/>
    </target>
    
    <target name="init-tomcat" depends="init" description="Defines tomcat tasks">
  		<taskdef name="start" classname="org.apache.catalina.ant.StartTask"> 
  			 <classpath refid="compile.classpath" />
  		</taskdef>
  		<taskdef name="stop" classname="org.apache.catalina.ant.StopTask">
			<classpath refid="compile.classpath" />
  		</taskdef>
 		<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask">
			<classpath refid="compile.classpath" />
		</taskdef>
  		<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">
			<classpath refid="compile.classpath" />
  		</taskdef>
    </target>
    
    <!-- TOMCAT ACTIONS -->
    <target name="start" depends="init-tomcat" description="start application in tomcat">
	<start url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="/${project.name}" />
    </target>
    
    <target name="stop" depends="init-tomcat" description="stop application in tomcat">
	<stop url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="/${project.name}" />
    </target>
	
    <target name="deploy" depends="pack, init-tomcat" description="deploy to tomcat">
	<echo>deploying from client</echo>
	<deploy url="${tomcat.manager.url}"
		username="${tomcat.manager.username}"
		password="${tomcat.manager.password}"
		path="/${project.name}"
		war="${dist.dir}/${war.name}"/>
    </target>
    
    <target name="undeploy" depends="init-tomcat, stop" description="undeploy from tomcat">
	<undeploy failonerror="no"
		url="${tomcat.manager.url}"
		username="${tomcat.manager.username}"
		password="${tomcat.manager.password}"
		path="/${project.name}"/>
    </target>
    
    <target name="findbugs" depends="compile" description="Findbugs analysis">
      <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.classpath}" />
      <findbugs home="${findbugs.home}"      
            output="xml:withMessages"
            outputFile="findbugsXml.SA.xml" >
        <auxClasspath refid="compile.classpath"/>
        <sourcePath path="${src.dir}" />
        <class location="${web.dir}/classes" />
      </findbugs>
    </target>
    
</project>