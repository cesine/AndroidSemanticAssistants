<?xml version="1.0"?>
<!-- $Id: build.xml,v 1.7 2007/05/10 15:03:27 gitzing Exp $ -->
<project name="CSAL" default="dist" basedir=".">
    <property name="semassist.home"           value="../" />

    <!-- Machine specific settings should go in SemassistProperties.xml -->
    <import file ="${semassist.home}/SemassistProperties.xml"/>

    <!-- Put machine dependent settings here -->
    <exec executable="hostname" osfamily="unix" failifexecutionfails="false" outputproperty="env.COMPUTERNAME"/>
    <property name="env.HOSTNAME" value="${env.COMPUTERNAME}"/>

    <property environment="env"/>

    <!-- Top Directories -->
    <property name="build.home"    value="${basedir}/bin"/>
    <property name="dist.home"     value="${basedir}/dist"/>
    <property name="docs.home"     value="${basedir}/docs"/>
    <property name="src.home"      value="${basedir}/src"/>

    <!-- Tool Directories -->
    <property name="wsdl.source"   value="http://${env.HOSTNAME}:${server.port.wsdl}/SemAssist?wsdl" />
    
    <!-- Library Files -->
    <property name="csal.jar"      value="${csal.home}/dist/CSAL.jar" />
    <property name="gate.jar"      value="${gate-home}/bin/gate.jar" />
   

    <description>
        Client side Java code of the semantic text assistants infrastructure
    </description>
  

    <path id="compile.classpath">
        <pathelement location="${gate.jar}"/>
        <pathelement location="${jaxws.home}/lib/jaxws-tools.jar"/>
    </path>

    <target name="init" >
        <mkdir dir="${build.home}" />
    </target>

  
    <!-- Generate a client for the web service when online -->
    <target name="wsimport" depends="init">
        <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
            <classpath path="${jaxws.home}/lib/jaxws-tools.jar"/>
        </taskdef>
        <wsimport fork="true"  keep="true" sourcedestdir="${src.home}"
        destdir="${build.home}" wsdl="${wsdl.source}" 
        xendorsed="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxws.home}/lib" />
        </wsimport>
    </target>


    <!-- Generate a client for the web service when offline-->
    <target name="wsimport-offline" depends="init">
        <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
            <classpath path="${jaxws.home}/lib/jaxws-tools.jar"/>
        </taskdef>

        <wsimport fork="true"  keep="true" sourcedestdir="${src.home}"
        destdir="${build.home}" wsdl="/${env.HOME}/SemAssist%3Fwsdl"
        xendorsed="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxws.home}/lib" />
        </wsimport>
    </target>
    
  
    <!-- This target compiles all the classes -->
    <target name="compile" description="Compile the source" >
        <!-- Compile the java code from ${srcDir} into ${buildDir} -->
        <mkdir dir="${build.home}" />
        <javac srcdir="${src.home}" debug="true" debuglevel="lines,vars,source"
destdir="${build.home}" includeantruntime="${antruntime}">
	  <compilerarg value="${compile.args}"/>
          <classpath refid="compile.classpath" />
        </javac>
    </target>
  
  
    <!-- Make archive -->
    <target name="dist" depends="wsimport,compile">
        <mkdir dir="${dist.home}" />
        <jar destfile="${dist.home}/CSAL.jar" update="false" index="true">
            <fileset dir="${build.home}" />
        </jar>
    </target>


    <!-- Make archive while offline-->
    <target name="dist-offline" depends="wsimport-offline,compile">
        <mkdir dir="${dist.home}" />

        <jar destfile="${dist.home}/CSAL.jar" update="false" index="true">
            <fileset dir="${build.home}" />
        </jar>
    </target>
    

    <!-- Clear all build output -->
    <target name="clean">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${build.home}"/>
        </delete>
        <delete file="${dist.home}/CSAL.jar"/>
    </target>

   <!-- Clear all build output and autogenerated files -->
    <target name="clean-autogen">
        <delete includeemptydirs="true">
            <fileset dir="${src.home}/info/semanticsoftware/semassist/server" />
        </delete>
        <delete includeemptydirs="true">
            <fileset dir="${build.home}"/>
        </delete>
    </target>
</project>

