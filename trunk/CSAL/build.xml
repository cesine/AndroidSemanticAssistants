<?xml version="1.0"?>
<!--
   Semantic Assistants - http://www.semanticsoftware.info/semantic-assistants

   This file is part of the Semantic Assistants architecture.

   Copyright (C) 2009, 2010, 2011 Semantic Software Lab, http://www.semanticsoftware.info

   The Semantic Assistants architecture is free software: you can
   redistribute and/or modify it under the terms of the GNU Affero General
   Public License as published by the Free Software Foundation, either
   version 3 of the License, or (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="CSAL" default="dist" basedir=".">
    <property name="semassist.home"           value="../" />

    <!-- Machine specific settings should go in SemassistProperties.xml -->
    <import file ="${semassist.home}/SemassistProperties.xml"/>

    <!-- Put machine dependent settings here -->
    <exec executable="hostname" osfamily="unix" failifexecutionfails="false" outputproperty="env.COMPUTERNAME"/>
    <property name="env.HOSTNAME" value="${env.COMPUTERNAME}"/>

    <property environment="env"/>

    <!-- Top Directories -->
    <property name="build.home"    value="${basedir}/bin"/>
    <property name="dist.home"     value="${basedir}/dist"/>
    <property name="docs.home"     value="${basedir}/docs"/>
    <property name="src.home"      value="${basedir}/src"/>

    <!-- Tool Directories -->
    <property name="wsdl.source"   value="http://${env.HOSTNAME}:${server.port.wsdl}/SemAssist?wsdl" />
    
    <!-- Library Files -->
    <property name="csal.jar"      value="${csal.home}/dist/CSAL.jar" />
    <property name="gate.jar"      value="${gate-home}/bin/gate.jar" />
   

    <description>
        Client side Java code of the semantic text assistants infrastructure
    </description>
  

    <path id="compile.classpath">
        <pathelement location="${gate.jar}"/>
        <pathelement location="${jaxws.home}/lib/jaxws-tools.jar"/>
    </path>

    <target name="init" >
        <mkdir dir="${build.home}" />
    </target>

  
    <!-- Generate a client for the web service when online -->
    <target name="wsimport" depends="init">
        <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
            <classpath path="${jaxws.home}/lib/jaxws-tools.jar"/>
        </taskdef>
        <wsimport fork="true"  keep="true" sourcedestdir="${src.home}"
        destdir="${build.home}" wsdl="${wsdl.source}" 
        xendorsed="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxws.home}/lib" />
        </wsimport>
    </target>


    <!-- Generate a client for the web service when offline
    <target name="wsimport-offline" depends="init">
        <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
            <classpath path="${jaxws.home}/lib/jaxws-tools.jar"/>
        </taskdef>

        <wsimport fork="true"  keep="true" sourcedestdir="${src.home}"
        destdir="${build.home}" wsdl="/${env.HOME}/SemAssist%3Fwsdl"
        xendorsed="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxws.home}/lib" />
        </wsimport>
    </target-->
    
    <!-- This target compiles all the classes -->
    <target name="compile" description="Compile the source" >
        <!-- Compile the java code from ${srcDir} into ${buildDir} -->
        <mkdir dir="${build.home}" />
        <javac srcdir="${src.home}" debug="true" debuglevel="lines,vars,source"
destdir="${build.home}" includeantruntime="${antruntime}">
	  <compilerarg value="${compile.args}"/>
          <classpath refid="compile.classpath" />
        </javac>
    </target>
  
  
    <!-- Make archive -->
    <target name="dist" depends="wsimport,compile">
        <mkdir dir="${dist.home}" />
        <jar destfile="${dist.home}/CSAL.jar" update="true" index="true">
            <fileset dir="${build.home}" />
        </jar>
    </target>


    <!-- Make archive while offline
	Note: The dist-offline depends on the compile target which relies on the files generated by wsimport task.
	Therefore, wsimport must have been called beforehand at least once in online mode or otherwise the compile target will fail.
    -->
    <target name="dist-offline" depends="compile">
        <mkdir dir="${dist.home}" />
        <jar destfile="${dist.home}/CSAL.jar" update="true" index="true">
            <fileset dir="${build.home}" />
        </jar>
    </target>
    
    <!-- Generates Javadoc output -->
    <target name="javadoc">
        <javadoc sourcepath="${src.home}" destdir="${javadoc.home}/CSAL" defaultexcludes="yes" author="true" version="true" use="true" link="true" windowtitle="Semantic Assistants: Client-Side Abstraction Layer">
        <doctitle><![CDATA[<h1>Semantic Assistants: Client-Side Abstraction Layer</h1>]]></doctitle>
        <bottom><![CDATA[<i>Copyright Â© 2011 Semantic Software Lab. http://www.semanticsoftware.info/</i>]]></bottom>
          </javadoc>
    </target>

    <!-- Findbugs analysis -->
    <target name="findbugs" depends="compile">
      <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" 
            classpath="${findbugs.classpath}" />
      <findbugs home="${findbugs.home}"      
            output="xml:withMessages"
            outputFile="findbugsXml.SA.xml" >
	<auxClasspath path="${ant.jar}:${gate.jar}:${gate-home}/lib/log4j-1.2.14.jar" />
	<sourcePath path="${basedir}/src" />
	<class location="${basedir}/bin/" />
      </findbugs>
    </target>

    <!-- Clear all build output -->
    <target name="clean">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${build.home}"/>
        </delete>
        <delete file="${dist.home}/CSAL.jar" />
    </target>

   <!-- Clear all build output and autogenerated files -->
    <target name="clean-autogen">
        <delete includeemptydirs="true">
            <fileset dir="${src.home}/info/semanticsoftware/semassist/server" />
        </delete>
        <delete includeemptydirs="true">
            <fileset dir="${build.home}"/>
        </delete>
    </target>
</project>

