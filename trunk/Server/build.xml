<?xml version="1.0"?>

<!--
   Semantic Assistants - http://www.semanticsoftware.info/semantic-assistants

   This file is part of the Semantic Assistants architecture.

   Copyright (C) 2009, 2010, 2011 Semantic Software Lab, http://www.semanticsoftware.info

   The Semantic Assistants architecture is free software: you can
   redistribute and/or modify it under the terms of the GNU Affero General
   Public License as published by the Free Software Foundation, either
   version 3 of the License, or (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="Server" default="run" basedir=".">
    <property name="semassist.home"           value="../" />

    <!-- Machine specific settings should go in SemassistProperties.xml -->
    <import file ="${semassist.home}/SemassistProperties.xml"/>

    <!-- Top Directories -->
    <property name="build.home"       value="${basedir}/bin"/>
    <property name="docs.home"        value="${basedir}/Javadoc"/>
    <property name="src.home"         value="${basedir}/src"/>
    <property name="dist.home"        value="${basedir}/dist"/>
	
    <!-- Used for testing -->
    <property name="test.src"		  value="${basedir}/test.src"/>
    <property name="junitDir" value="${build.home}/JUnit"/>
    <property name="tempDir" value="${basedir}/tmp"/>
    <mkdir dir="${junitDir}"/>	
	
    <!-- ___________________ You should not have to edit anything below this line ________________________  -->
    <description>
        Server side Java code of the semantic text assistants infrastructure
    </description>
  
    <path id="compile.classpath">
        <pathelement location="${gate.jar}" />
        <pathelement location="${protege.jar}" />
        <pathelement location="${protege-owl.home}/protege-owl.jar" />
        <pathelement location="${protege-owl.home}/jena.jar" />
        <pathelement location="${protege-owl.home}/arq.jar" />
        <pathelement location="${ant.jar}" />
        <pathelement location="${commons-lang.jar}" /> <!-- used for xml encoding -->
    	<pathelement location="${gate-home}/lib/junit.jar" />
	<pathelement location="${lib.home}/icu4j-3.8.jar" />
    </path>    
  
    <!-- This target compiles all the classes -->  
    <target name="compile" description="Compile the source" >
    <!-- Compile the java code from ${srcDir} into ${buildDir} -->
        <mkdir dir="${build.home}" />
        <javac srcdir="${src.home}" debug="true" debuglevel="lines,vars,source" destdir="${build.home}" includeantruntime="${antruntime}">
        	<compilerarg value="${compile.args}" />
        	<classpath refid="compile.classpath" />
        </javac>
    </target>

    <!-- Generate a web service -->
    <target name="wsgen" depends="compile" description="Generate a web service">
        <taskdef name="wsgen" classname="com.sun.tools.ws.ant.WsGen">
            <classpath>
                <pathelement location="${jaxws.home}/lib/jaxws-tools.jar" />
                <pathelement location="${jaxws.home}/lib/jaxb-xjc.jar" />
            </classpath>
        </taskdef>
    
        <wsgen sei="info.semanticsoftware.semassist.server.SemanticServiceBroker" destdir="${build.home}"
      sourcedestdir="${build.home}" verbose="true" xendorsed="true" debug="false" >
            <classpath>
                <pathelement location="${build.home}" />
                <pathelement location="${gate.jar}"/>
            </classpath>
        </wsgen>
    </target>

    <target name="dist" depends="wsgen"  description="generate the distribution" >
    <!-- Create the distribution directory -->
        <mkdir dir="${dist.home}"/>
        <jar jarfile="${dist.home}/SemassistServerWS.jar" basedir="${build.home}">
            <manifest>
                <attribute name="Main-Class" value="info.semanticsoftware.semassist.server.Bootstrap"/>
            </manifest>
        </jar>
    </target> 

    <target name="junit" depends="compile,dist" description="Performs unit tests.">
        <javac srcdir="test.src" destdir="${build.home}" debug="true" deprecation="true">
        	<classpath refid="compile.classpath"/>
        </javac>

        <mkdir dir="${tempDir}"/>

        <junit failureproperty="junit.failed"  printsummary="yes">
            <formatter type="xml"/>
            <batchtest todir="${tempDir}">
                <fileset dir="${build.home}">
                   <include name="**/*Test.class"/>
                   <include name="**/Test*.class"/>
                </fileset>
            </batchtest>
            <classpath>
                <path refid="compile.classpath"/>
                <pathelement location="${build.home}"/>            	
                <pathelement location="${gate.jar}" />
                <pathelement location="${protege.jar}" />
                <pathelement location="${protege-owl.home}/protege-owl.jar" />
                <pathelement location="${protege-owl.home}/iri.jar" />
                <pathelement location="${protege-owl.home}/jena.jar" />
                <pathelement location="${protege-owl.home}/orphanNodesAlg.jar" />
                <pathelement location="${protege-owl.home}/arq.jar" />
                <fileset dir="${gate-home}/lib" >
                    <include name="*.jar" />
                </fileset>

            	
            </classpath>
        </junit>

        <mkdir dir="${build.home}/JUnit"/>
  	
        <fail message="JUnit test failure." if="junit.failed"/>  	
    </target>


    <!-- Run the web service -->
    <target name="run" depends="compile,dist"  description="run the application">
        <!-- UNCOMMENT FOR REST 
        <echo message="deploying RESTful interface"/>
        <ant antfile="rest/build.xml" target="deploy" inheritall="false" />
        -->
        
        <java classname="info.semanticsoftware.semassist.server.Bootstrap" fork="true" maxmemory="${runtime.maxmem}" >
            <jvmarg value="-Xms${runtime.heap.initial}"/>
            <jvmarg value="-Xmx${runtime.heap.max}"/>
	    <jvmarg value="-Dcom.sun.xml.ws.transport.http.client.HttpTransportPipe.dump=true"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=${server.port.debug},suspend=n"/>
            <classpath>
                <pathelement location="${build.home}" />
                <pathelement location="${gate.jar}" />
                <pathelement location="${protege.jar}" />
                <pathelement location="${protege-owl.home}/protege-owl.jar" />
                <pathelement location="${protege-owl.home}/iri.jar" />
                <pathelement location="${protege-owl.home}/jena.jar" />
                <pathelement location="${protege-owl.home}/orphanNodesAlg.jar" />
                <pathelement location="${protege-owl.home}/arq.jar" />
		<pathelement location="${lib.home}/icu4j-3.8.jar" />
                <fileset dir="${gate-home}/lib" >
                    <include name="*.jar" />
                </fileset>
            	
        		<!-- Locally needed paths defined in LocalProperties.xml file -->
                <path refid="localruntimeclasspath"/>
                
            </classpath>
        </java>
    </target>
    
    <!-- Generates Javadoc output -->
    <target name="javadoc">
        <javadoc sourcepath="${src.home}" destdir="${docs.home}" defaultexcludes="yes" author="true" version="true" use="true" link="true" windowtitle="Semantic Assistants: Server">
        <doctitle><![CDATA[<h1>Semantic Assistants: Server</h1>]]></doctitle>
        <bottom><![CDATA[<i>Copyright Â© 2011 Semantic Software Lab. http://www.semanticsoftware.info/</i>]]></bottom>
          </javadoc>
    </target>

    <!-- Findbugs analysis -->
    <target name="findbugs" depends="compile">
      <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" 
            classpath="${findbugs.classpath}" />
      <findbugs home="${findbugs.home}"      
            output="xml:withMessages"
            outputFile="findbugsXml.SA.xml" >
	<auxClasspath path="${ant.jar}:${gate.jar}:${gate-home}/lib/log4j-1.2.14.jar:${protege.jar}:${protege-owl.home}/protege-owl.jar:${protege-owl.home}/jena.jar:${protege-owl.home}/iri.jar:${protege-owl.home}/orphanNodesAlg.jar:${protege-owl.home}/arq.jar:${commons-lang.jar}" />
	<sourcePath path="${basedir}/src" />
	<class location="${basedir}/bin/" />
      </findbugs>
    </target>
  
    <!-- Clear all build output -->
    <target name="clean">
      <echo message="cleaning generated files"/>
      <delete includeemptydirs="true" quiet="true">
	<fileset dir="${build.home}" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
      </delete>
      <delete dir="${docs.home}"/>
      <!-- UNCOMMENT FOR REST
	<echo message="undeploying RESTful interface"/>
	<ant antfile="rest/build.xml" target="clean-all" inheritall="false" />
      -->
    </target>

</project>

