<?xml version="1.0"?>

<!--
   Semantic Assistants - http://www.semanticsoftware.info/semantic-assistants

   This file is part of the Semantic Assistants architecture.

   Copyright (C) 2009, 2010, 2011 Semantic Software Lab, http://www.semanticsoftware.info

   The Semantic Assistants architecture is free software: you can
   redistribute and/or modify it under the terms of the GNU Affero General
   Public License as published by the Free Software Foundation, either
   version 3 of the License, or (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="OpenOffice" default="run" basedir=".">
    <property name="semassist.home"           value="../../" />

    <!-- Machine specific settings should go in SemassistProperties.xml -->
    <import file ="${semassist.home}/SemassistProperties.xml"/>

    <!-- Top Directories -->
    <property name="build.home" value="${basedir}/bin"/>
    <property name="docs.home"  value="${basedir}/docs"/>
    <property name="src.home"   value="${basedir}/src"/>
    <property name="dist.home"  value="${basedir}/dist"/>


    <!-- Tool Directories -->
    <property name="office.unopkg"    value="${office.program.dir}${file.separator}unopkg"/>
    <property name="office.soffice"   value="${office.program.dir}${file.separator}soffice"/>
    
    <!-- Other -->
    <property name="uno-target-file"  value="SemassistOpenOfficePlugIn.uno.zip" />
    <property name="compile.debug"    value="true" />

    <description>
        OpenOffice.org client for the Semantic Assistants architecture
    </description>

    <path id="compile.classpath">
        <pathelement location="${dist.home}/${csal.name}" />
        <pathelement location="${ooo-classes-common}/juh.jar" />
        <pathelement location="${ooo-classes-common}/jurt.jar" />
        <pathelement location="${ooo-classes-common}/ridl.jar" />
        <pathelement location="${ooo-classes-basis}/unoil.jar" />
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${commons-lang.jar}"/>
    </path>

    <!-- This target compiles the CSAL to the dist -->  
    <target name="copycsal" description="Copy CSAL.jar" >
      <copy file="${csal.home}/dist/${csal.name}" todir="${dist.home}"/>
    </target>

    <!-- This target compiles all the classes -->  
    <target name="compile" depends="copycsal" description="Compile the source" >
        <!-- Compile the java code from ${srcDir} into ${buildDir} -->
        <mkdir dir="${build.home}" />
        <copy file="${commons-lang.jar}" todir="${dist.home}"/>
        <copy file="${log4j.jar}" todir="${dist.home}"/>
        <javac srcdir="${src.home}/" destdir="${build.home}" debug="true" debuglevel="lines,vars,source"  classpath="${build.home}"  includeantruntime="${antruntime}">
            <compilerarg value="${compile.args}" />
            <classpath refid="compile.classpath" />
        </javac>
    </target>

    <!-- Pack the compiled classes into a jar archive  -->
    <target name="dist1" depends="compile"  description="Create jar from the compiled classes" >
        <!-- Create the distribution directory -->
        <mkdir dir="${dist.home}"/>
        <jar jarfile="${dist.home}/ProtocolHandlerAddon_java.uno.jar" basedir="${build.home}">
            <manifest>
                <attribute name="RegistrationClassName" value="ProtocolHandlerAddon"/>
            </manifest>
        </jar>
    </target>


    <!-- Make a uno package  -->
    <target name="dist2" depends="dist1"  description="Provide the whole UNO package" >
        <zip destfile="${basedir}/${uno-target-file}" basedir="${dist.home}">
        </zip>
    </target>

    <!-- Copy the UNO package to the desired location  -->
    <target name="deploy" depends="dist2"  description="Copy the UNO package to the desired location" >
        <copy file="${basedir}/${uno-target-file}" todir="${uno-copy-dest}" />
    </target>
  
    <!-- Run uno-extention manager  -->
    <target name="run" depends="deploy"  description="Run uno-extention manager" >
	<!-- subtargets for different office versions -->
        <echo message="${office.unopkg} add -f ${uno-target-file}"/>
        <exec dir="${office.program.dir}" executable="${office.unopkg}" failonerror="true">
            <arg value="add"/>
            <arg value="-f"/>
            <arg file="${uno-target-file}"/>
        </exec>
        <echo message="${office.soffice}"/>
        <exec executable="${office.soffice}" dir="${office.program.dir}" failonerror="true">
            <arg value="-norestore"/>
        </exec>
    </target>


    <!-- Run uno-extention manager with gui  -->
    <target name="run-gui" depends="deploy"  description="Run uno-extention manager" >
	<!-- subtargets for different office versions -->
        <echo message="${office.unopkg} gui -f ${uno-target-file}"/>
        <exec dir="${office.program.dir}" executable="${office.unopkg}" failonerror="true">
            <arg value="gui"/>
            <arg value="-f"/>
            <arg file="${uno-target-file}"/>
        </exec>
        <echo message="${office.soffice}"/>
        <exec executable="${office.soffice}" dir="${office.program.dir}" failonerror="true">
            <arg value="-norestore"/>
        </exec>
    </target>

  <!-- Clear all build output -->
    <target name="clean">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${build.home}" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
            <fileset dir="${dist.home}" excludes="**/*.xcu,**/CVS,**/CVS/**,**/.cvsignore"/>
	    <fileset file="${uno-target-file}"/>
	    <fileset file="${dist.home}/${csal.name}"/>
        </delete>
    </target>
</project>

